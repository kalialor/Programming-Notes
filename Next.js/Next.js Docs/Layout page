A layout is UI that is shared between multiple pages. On navigation, layouts preserve state, remain interactive, and do not re-render. Layouts can also be nested.

You can define a layout by default exporting a React component from a layout.js file. The component should accept a children prop that will be populated with a child layout (if it exists) or a child page during rendering.



export default function DashboardLayout({
  children, // will be a page or nested layout
}: {
  children: React.ReactNode
}) {
  return (
    <section>
      {/* Include shared UI here e.g. a header or sidebar */}
      <nav></nav>
 
      {children}
    </section>
  )
}












Good to know:

The top-most layout is called the Root Layout. This required layout is shared across all pages in an application. Root layouts must contain html and body tags.

Any route segment can optionally define its own Layout. These layouts will be shared across all pages in that segment.

Layouts in a route are nested by default. Each parent layout wraps child layouts below it using the React children prop.

You can use Route Groups to opt specific route segments in and out of shared layouts.

Layouts are Server Components by default but can be set to a Client Component.

Layouts can fetch data. View the Data Fetching section for more information.

Passing data between a parent layout and its children is not possible. However, you can fetch the same data in a route more than once, and React will automatically dedupe the requests without affecting performance.

Layouts do not have access to the current route segment(s). To access route segments, you can use useSelectedLayoutSegment or useSelectedLayoutSegments in a Client Component.

.js, .jsx, or .tsx file extensions can be used for Layouts.

A layout.js and page.js file can be defined in the same folder. The layout will wrap the page.
















import './globals.css'
import { Inter } from 'next/font/google'
import Navbar from './components/navbar'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <Navbar />
        {children}</body>
    </html>
  )
}






Let's break down the code step by step:

1. `import './globals.css'`: This imports a CSS file called `globals.css`. It is likely a global CSS file that contains styles to be applied across your Next.js application.

2. `import { Inter } from 'next/font/google'`: This imports the `Inter` font from the `next/font/google` package. The `Inter` font is a popular open-source font designed for better readability on screens.

3. `const inter = Inter({ subsets: ['latin'] })`: This creates a variable named `inter` and assigns it the result of calling the `Inter` function with an object containing the `subsets` property set to `['latin']`. This likely specifies that only the Latin character subset of the `Inter` font should be used.

4. `export const metadata = { ... }`: This exports an object named `metadata` which contains information about the app, such as the title and description. This can be used for SEO purposes or other metadata-related functionality.

5. `export default function RootLayout({ ... }) { ... }`: This exports a React functional component named `RootLayout`. It takes a single parameter, an object with a property named `children` that expects a React node as its value.

6. Within the `RootLayout` component, it returns JSX that represents the HTML structure. It starts with an `html` tag with the `lang` attribute set to "en" for English.

7. Inside the `body` tag, it adds a class to the `className` attribute using the `inter.className` value. This applies the styles associated with the `Inter` font to the body element.

8. Next, it includes the `Navbar` component. This is likely a custom component that represents a navigation bar.

9. Finally, it renders the `children` prop, which represents the content wrapped by the `RootLayout` component.

In summary, this code sets up a root layout component for your Next.js application. It imports global CSS styles, a font, and a custom `Navbar` component. It also exports metadata about the app. The `RootLayout` component wraps its children within an HTML structure, applies styles for the `Inter` font, and renders the `Navbar` component along with the provided children.


