Use a bundler rather than inputting the links on the HTML & JavaScript file.

You can use a bundler to create a local server, manage dependencies, improve compatibility, support modules, optimize images, deploy on a server, minify the code, etc. 


Webpack is currently the most popular bundler. It can handle most of your needs and provide extensive documentation and a constructive community.


-Go to project folder in the terminal: npm install

-npm install, installs dependencies like Three.js

Then type in npm run dev to start the server





Some notes:

You don't need to add js file to HTML file. Webpack does it automatically.

You need to load the CSS file to the JS file








BASIC SCENE


We want to get our scene back in this Webpack template.

First, you need to add the <canvas> to the src/index.html file:




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>04 - Webpack</title>
</head>
<body>
    <canvas class="webgl"></canvas>                <----***make sure you add this!
</body>
</html>











JavaScript:
to create a cube, you need to create a type of object named mesh. a mesh is the
combination of a geometry(the shape) and a material (how it looks).
    

Perspective Camera, making close objects look more prominent than far objects
    
perspective camera=2 parameters-field of view & aspect ratio
    
    
renderer-the result will be drawn into a canvas
    
multiple properties on an object-position, rotation, scale
    
x is right
y is up & down
z is forward and backwards

you can change the position property in the camera


import './style.css'                        <---imports the css
import * as THREE from 'three'              <-----imports three.js
    


//Scene
const scene = new THREE.Scene()
     


//Object
const geometry = new THREE.BoxGeometry(1,1,1)               <---box size
const material = new THREE.MeshBasicMaterial({ color: 0ff0000})     <----this is JS hexadecimal
const mesh = new THREE.Mesh(geometry, material)
scene.add(mesh)
    

    
//Sizes
const sizes = {
    width: 800, 
    height: 600
}
    
    
//Camera
const camera = new THREE.PerspectiveCamera(75, sizes.width / sizes.height)
camera.position.z = 3
scene.add(camera)
    
    
//Renderer
const renderer = new THREE.WebGLRenderer({
    canvas: document.querySelector('canvas.webgl') <--grabbing canvas from HTML
})
renderer.setSize(sizes.width, sizes.height)
renderer.render(scene, camera)